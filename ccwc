#!/usr/bin/env python3
import sys
# My though process:
# Second argument can either include a "-" (hyphen) or have a ".txt" as a file extension
    #maybe you can use that to differentiate between commands?
# Each command needs to have to atleast two arguments
    # After you're done with most of the final implementation you can add a "--help"

# Step 1: Try to accept multiple files
# this function opens a filename and prints out either the # of lines, words, characters or bytes
def open_file(filename, argument_type):
    characters = 0
    words = 0
    # lines = 0
    # bytess = 0
    with open('examples/' + filename, 'r') as f:
        match argument_type:
            # this matches when the argument type passed in is '-c', which returns the bytes of the filename
            case "-c":
                # I used a separate with open here as it uses a different mode than the parent with open above
                with open('examples/' + filename, 'rb') as f_bytes:
                    #print number of bytes
                    # calling .read() on the IOWrapper returns the number of bytes(when printed it looks like a string)
                    bytess = f_bytes.read()
                    # call the length function to return the number of bytes
                    # need to print a specific f string out to match the original wc program
                    return f'  {len(bytess)}\t{filename}', len(bytess)
            case "-l":
                #print out # of lines
                lines = len(f.readlines())
                return f'  {lines}\t{filename}', lines
            case '-m':
                # prints out # of characters
                for char in f.read():
                    characters +=1
                return f'  {characters}\t{filename}', characters
            case '-w':
                #print out # of words
                list_of_lines = f.readlines()
                for line in list_of_lines:
                    words_list = line.split()
                    words += len(words_list)
                return f'  {words}\t{filename}', words
            case _:
                #find the # of lines for this current file 
                with open('examples/' + filename, 'r') as f:
                    lines = len(f.readlines())
                #find the # of bytes for this current file
                with open('examples/' + filename, 'rb') as f:
                    bytess = len(f.read())
                # find the # of words in this current file
                with open('examples/' + filename, 'r') as f:
                    list_of_lines = f.readlines()
                    for line in list_of_lines:
                        words_list = line.split()
                        words += len(words_list)
                return f'  {lines}\t{words}\t{bytess}\t{filename}', lines, words, bytess
argument_type = ""
total_words = 0
total_lines = 0
total_bytes = 0
total_characters = 0
for files in sys.argv:
    if files.__contains__("-"):
        # sets the argument type and stores it in a variable
        argument_type = files
    # this confirms its a file
    if files.__contains__(".txt"):
        # this calls open_file with files(which is the current filename) and argument_type('r', 'rb') using PHP backend
        return_string = open_file(files, argument_type)
        match argument_type:
            case '-l':
                total_lines += return_string[1]
            case '-w':
                total_words += return_string[1]
            case '-c':
                total_bytes += return_string[1]
            case '-m':
                total_characters += return_string[1]
            case _:
                total_lines += return_string[1]
                total_words += return_string[2]
                total_bytes += return_string[3]
        print(return_string[0])
if(sys.argv[1] == '-l'):
    print(f'  {total_lines}\ttotal')
elif(sys.argv[1] == '-w'):
    print(f'  {total_words}\ttotal')
elif(sys.argv[1] == '-c'):
    print(f'  {total_bytes}\ttotal')
elif(sys.argv[1] == '-m'):
    print(f'  {total_characters}\ttotal')
else:
    if(len(sys.argv)) > 2:
        print(f'  {total_lines}\t{total_words}\t{total_bytes}\ttotal')


# Step 2: Print out the lines, words and bytes for each file on a separate line

# Step 3: Calculate the sum of the lines, words and bytes and then print them out on a separate line
